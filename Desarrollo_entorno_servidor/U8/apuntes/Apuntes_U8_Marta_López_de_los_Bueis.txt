¿Qué es una API de REST?

*Conjunto de reglas que permite la comunicación entre sistemas utilizando el protocolo HTTP. 
REST es un estilo arquitectónico que define cómo las API deben estructurarse para ser simples, escalables y eficaces.

Las APIs REST suelen utilizar métodos HTTP para realizar operaciones sobre los recursos:

*GET: Leer o recuperar información.
*POST: Crear un nuevo recurso.
*PUT o PATCH: Actualizar un recurso existente.
*DELETE: Eliminar un recurso.

***************************************
@setter
 Genera automáticamente el método "setter"

	*Ejemplo sin @setter*
public class Persona {
    private String nombre;

    // Método setter manual
    public String setNombre() {
        return nombre;
    }
}

	*Ejemplo con @setter*

import lombok.Setter;

public class Persona {
    @Setter
    private String nombre;
}

**********************************************************************************************

@getter

 Genera automáticamente el método "Getter"

	*Ejemplo sin @Getter*

public class Persona {
    private String nombre;

    // Método getter manual
    public String getNombre() {
        return nombre;
    }
}

	*Ejemplo con @Getter*

import lombok.Getter;

public class Persona {
    @Getter
    private String nombre;
}

*************************************************************************************************

@Data

 Genera automáticamente lo siguiente:

1.Getters para todos los atributos de la clase.
2.Setters para todos los atributos no finales.
3.toString(): Un método para representar el objeto como una cadena.
4.equals() y hashCode(): Métodos para comparar objetos y calcular su código hash.
5.Constructor: Un constructor sin argumentos (si no hay otros constructores definidos).
6.canEqual(): Un método especial utilizado para garantizar la correcta comparación en subclases.

	*Ejemplo sin @Data*

public class Persona {
    private String nombre;
    private int edad;

    // Constructor
    public Persona(String nombre, int edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    // Getters y Setters
    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public int getEdad() {
        return edad;
    }

    public void setEdad(int edad) {
        this.edad = edad;
    }

    // Método toString
    @Override
    public String toString() {
        return "Persona{nombre='" + nombre + "', edad=" + edad + "}";
    }

    // Métodos equals y hashCode
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Persona persona = (Persona) o;
        return edad == persona.edad && Objects.equals(nombre, persona.nombre);
    }

    @Override
    public int hashCode() {
        return Objects.hash(nombre, edad);
    }
}

	*Ejemplo con @Data*

import lombok.Data;

@Data
public class Persona {
    private String nombre;
    private int edad;
}

**********************************************************************

Operacion	Método		Descripcion 		EndPoint

cRud GET	listarGrupos	traer datos, 		@GetMapping("/grupos")
				todos los grupos	@PathVariable String grupo

cRud GET	gruposDeUnIes	Traer solo los
				grupos de los ies	@GetMapping("/grupos/{ies}")

Crud POST	crearGrupo	Insertar nuevo dato	@PostMapping
							@PathVariable 

crUd PUT	actualizarGrupo	

cruD DELETE 	borrarGrupo

********************************************************************

@RequiredArgsConstructor --> Crea automáticamente un constructor que incluye todos los campos que son
final o que tienen la anotación @NonNull

	@RequiredArgsConstructor
	public class Persona {
   		private final String nombre;  // Este campo será obligatorio en el constructor.
   		@NonNull
    		private String apellido;      // Este campo también será obligatorio.
    		private int edad;             // Este campo NO será incluido en el constructor.
	}


@NoArgsConstructor -->Crea un constructor vacío (sin parámetros).
	@NoArgsConstructor
	public class Persona {
    		private String nombre;
   		private int edad;
	}

	public Persona() {
    						// Constructor vacío
	}

@AllArgsConstructor -->Genera un constructor que incluye 
todos los campos de la clase, sean final, normales o con @NonNull.

	@AllArgsConstructor
	public class Persona {
    		private String nombre;
    		private int edad;
	}

	public Persona(String nombre, int edad) {
   		this.nombre = nombre;
    		this.edad = edad;
	}
@NonNull--> Indica que un campo no debe ser null. 
Si intentas asignarle null, se lanzará una excepción NullPointerException.



********************************************************************
Arquitectura MVC

(Modelo-Vista-Controlador) es un patrón de diseño de software que organiza 
la lógica de una aplicación en tres componentes principales, 
para separar responsabilidades y facilitar el mantenimiento y escalabilidad.

1. Modelo 
Es la capa que gestiona los datos y la lógica de negocio de la aplicación.
Ejemplo: Una clase que representa un usuario (Usuario) y que tiene métodos 
para guardar o recuperar información desde la base de datos.

2. Vista
Es la capa encargada de la interfaz de usuario (UI).

3. Controlador 
Es la capa intermediaria entre el Modelo y la Vista.
Responsabilidad:
-Procesar las entradas del usuario desde la Vista.
-Llamar a los métodos del Modelo para actualizar los datos.
-Decidir qué Vista mostrar en función del estado del Modelo.

*********************************************************************
Lombok
Es una biblioteca de Java que reduce el código repetitivo y 
facilita el desarrollo al generar automáticamente métodos comunes.

-@Getter y @Setter: Generan los métodos get y set para los atributos.
-@ToString: Genera el método toString().
-@EqualsAndHashCode: Genera los métodos equals() y hashCode().
-@Data: Combina @Getter, @Setter, @ToString, @EqualsAndHashCode, y un constructor para los campos final.
-@Builder: Permite usar el patrón de diseño Builder para crear objetos.
-@NoArgsConstructor, @AllArgsConstructor, @RequiredArgsConstructor: Generan constructores automáticamente.

********************************************************************
CRUD y Postman
CRUD-->acrónimo que representa las cuatro operaciones básicas que se realizan en una 
base de datos o en el manejo de información dentro de una aplicación
C - Create (Crear)
Se refiere a la operación de añadir nuevos datos o registros a una base de datos.

R - Read (Leer)
Permite recuperar o consultar datos de una base de datos.


CRUD es un acrónimo que representa las cuatro operaciones básicas que se realizan en una base de datos o en el manejo de información dentro de una aplicación:

C - Create (Crear)
Se refiere a la operación de añadir nuevos datos o registros a una base de datos.
Ejemplo: Registrar un nuevo usuario en un sistema.

R - Read (Leer)
Permite recuperar o consultar datos de una base de datos.
Ejemplo: Ver el perfil de un usuario o listar todos los productos.

U - Update (Actualizar)
Se refiere a la operación de modificar datos existentes.

D - Delete (Eliminar)
Permite eliminar datos de la base de datos.

POSTMAN --> Herramienta de desarrollo utilizada para realizar pruebas de APIs

***********************************************************************

RESPONSE ENTITY
Es una clase que representa una respuesta HTTP completa, 
incluida la cabecera, el cuerpo y el código de estado. 
Se utiliza para enviar respuestas desde un controlador (controller) 
hacia el cliente en aplicaciones web basadas en Spring.

RESPONSE STATUS EXCEPTION
Es una clase que se utiliza para manejar excepciones específicas dentro de una aplicación web

SERVICE Y AUTOWIRED
Son anotaciones utilizadas para la gestión de dependencias y la inyección de objetos
	@Service-->Es una anotación que marca una clase como un servicio de negocio, esta clase será 
	detectada y gestionada por el contenedor de Spring.
	@Autowired-->Anotación que se usa para inyectar dependencias automáticamente en una 
	clase gestionada por el contenedor de Spring

***********************************************************************
DOCUMENTACIÓN DE API CON SWAGGER

Swagger es una herramienta para documentar APIs RESTful de manera automática.

	<dependency>
   		<groupId>org.springdoc</groupId>
    		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    		<version>2.7.0</version>
	</dependency>


La clase tiene que llevar la etiqueta @Configuration y el metodo tiene que tener la etiqueta @Bean que devuelve el objeto de la clase OpenAPI.

	@Configuration
	public class SwaggerConfig {
    		@Bean
    		public OpenAPI customOpenAPI() {
        		return new OpenAPI()
			.info(new Info()
				.title()
				.version()
				.description()
			);
   		}
	}
	